* Reflection

** 参考	Code Java Volume I 的 第5章 《继承》 第7节 反射

*** reflection library (反射库)

**** 什么是反射库

     - 反射库 是一个 JPI 提供的 库

     - reflection library 提供了一个 非常丰富且精心设计的 工具集

       - 这个工具集 以便编写能够 动态操纵 Java 代码的程序。

       - 这个功能 被大量用于 「JavaBeans」 中

	 - JavaBeans 是 Java 组件的 「体系结构」(Core Java Volume II 里面 阐述)


*** reflection (反射)

**** 什么是反射

     - 能够分析 类能干嘛 的 程序 就是 反射

**** 用途

     - (1) 在运行时分析类的能力

     - (2) 在运行时查看对象， 例如， 编写一个 toString() 方法 供所有类 使用。
       - 这个完全不理解， 囧， 怎么写一个 toString 给所有类使用

     - (3) 实现通用的数组 操纵代码。

     - (4) 利用 Method 对象， 这个对象可以调用 反射的类 的方法 有点像 函数指针( void * fpt(int a) )

**** 谁使用反射

     - 使用反射的 「主要人员」 是 「工作构造器」， 而 不是 应用程序员。


*** Class 类

**** 什么是 Class 类

     - (1) 在程序运行期间， Java运行时 系统始终为「所有的对象」维护一个被称为运行时的类型标识。 这个信息跟踪着每个对象所属的类， 虚拟机利用运行时类型信息选择相应的方法执行。
       - class 文件？ 字节码 文件？

     - (2) 可以用 Java类 访问这些信息， 保存这些信息的类称为 Class
       - 那个 Java类 就是 Class类的意思吗？ 还是 Java其他类可以访问这些信息， 而这些信息要用 Class 的对象去存放？
       - 我觉得是后者


**** getClass()

***** 概述
      - 这是个 Object类的方法 (就是人人都有这个功能)


***** 功能
      - 返回 一个 Class 类型 的 实例
	- 返回 调用者(对象) 的信息 (用 Class的对象 保存这些信息)
	  #+BEGIN_SRC java
	  Class cle_e = e[1].getClass();
	  #+END_SRC
	- 就是把 e[1]的信息 返回 给 cle_e (上一节的第(2) 点 可以用 Java类 访问这些信息， 保存这些信息的类称为 Class)
      
***** 特点
      - 打印 getClass()
	- Object类 被打印 默认是 打印的结果是 toString()方法
	- 所以打印的结果是 包名.类名 (有包打包， 没包直接出结果)


**** forName()

***** 概述
      - 这是 Class类 的静态方法， 


***** 功能
      - 可以根据forName参数 的类名 返回 对应的 Class 对象
	- 就是直接把这个调用者的信息 返回给 Class 造的对象， 然后用Class 造的对象为所欲为


***** 特点
      - 只有 参数 是 类名 或者 接口 才能执行， 不然会抛出异常(checked exception)


**** getName()

***** 概述:
      - 是 Class 类 的 实例方法

***** 功能:
      - 返回 调用者的 类名


***** 特点
      - 鉴于历史原因， getName应用于数组类型的时候会返回 "[L" 或者其他 "[I" ...
**** 泛型类

     - Class类 其实是个 泛型类
       - ex:
	 #+BEGIN_SRC java
	 public final class Class<T> implements java.io.Serializable, ...
	 #+END_SRC
