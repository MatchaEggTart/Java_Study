* 第8章 泛型程序设计

** 域
   - 域 field
   - 也就是我们常说的字段，或者说是属性。 比如类的字段（属性），局部的，全局的。所谓域，其实是“field”的翻译
   然后实例域，就是 实例("object" )的"field"。包括实例域和静态域，静态域又叫类域。

** 

	- Java 5.0之后增加了泛型机制, 避免『杂乱无章』使用Object变量
	- 让强制性转换的代码具有更好的『安全性』和『可读性』， 有人说还能 让『强制性转换更轻松』。
	- 泛型在『集合类』尤其有用。

** 8.1 为什么要使用泛型程序设计

*** Generic programming(泛型程序设计)

    * 意味
      - Generic programming编写的代码可以被很多不同类型的对象所重用。


*** 8.1.1 类型参数的好处
    
    * 没增加泛型类之前的， 泛型程序设计是用『继承』(extends)实现的。 ex: ArrayList类
      #+BEGIN_SRC java
	public class ArrayList	// before generic type
	{
            private Object[] elementDate;
	    ...
	    public Object get(int i)  { ... }	// mark 1
	    public void add(Object o) { ... }	// mark 2, add Object class means add everything
	}
      #+END_SRC

    * 这个方法有 两个问题
      #+BEGIN_SRC java
            ArrayList files = new ArrayList();
            ...
            String filename = (String) files.get(0);	// 获取一个值必须强制性转换， Object -> String, mark 1 明显 return Object
            ...
            files.add(new File("..."));		// mark 2, add 参数是 Object,  如果先get了个Object， 强制性转换了， 然后用这个add可能会报错
      #+END_SRC

    * type parameters(类型参数)
      - 提供了解决方案
	#+BEGIN_SRC java
	    ArrayList<String> files = new ArrayList<String>();
	#+END_SRC

**** 好处(1) 『可读性』
     - 代码拥有更好的『可读性』。像上面例子。 一看就知道这个数组列表是 String 对象。

**** 好处(2) 『安全性』
     - 编译器通过<>这个标签 指导， 返回值类型是String， 调用get的时候不需要『强制性类型转换』。
     - 还能在编译阶段就能发现错误的使用其他类型， 比如add()了一个int类型， 不需要等运行阶段才发现， 然后还要查错

**** 

*** 8.1.2 谁想成为泛型程序员?

    * 大多数程序员都使用泛性类的， 把他们当作是语言规则那样，实际上实现泛性类不容易。
      - 用通配型类型来放在每个接口、 类、 方法中， 然后可以向他们传入不同类型的数据交给他们处理。

    * wildcard type(通配型类型)
      - 可以让程序员少了很多限制， 形参代表类型，提高代码复用性
      - Generic Programming 分为3个能力级别
	- 1. 基本级别 仅仅使用泛型类——————不必考虑他们的原因跟工作方式。
	- 2.
	- 3.



** 8.2 定义简单泛型类

*** 代码
   - Pair.java
     #+BEGIN_SRC java
     public class Pair<T> {
         private T first;
	 private T second;

	 public Pair() {
	 }

	 public Pair(T first, T second) {
             this.first = first;
             this.second = second;
	 }

	 public T getFirst() {
             return first;
	 }

	 public void setFirst(T first) {
             this.first = first;
	 }

	 public T getSecond() {
             return second;
	 }

	 public void setSecond(T second) {
             this.second = second;
	 }
     }
     #+END_SRC

*** generic type(泛型类)
    
    - 就是具有一个或多个类型变量的类。

    - 上面的类型变量 T 用 <> 括起来， 放在 类名后面， 有点像是 声明规则 第一次用<T>来声明

    - 声明规则:	在类名后用<>括起来
      修饰符 class 类名<类型变量> { ... }
    
    - 多个类型变量的类  ex:
      #+BEGIN_SRC java
      public class Pair<T, U, K, V> { ... }      
      #+END_SRC

    - 类型变量 可以指定 方法的返回类型 和 域和局部变量 的 类型  ex:
      
      #+BEGIN_SRC java
      
      private T first;
       
      public void setFirst(T first) { ... }
      #+END_SRC

*** 『实例化泛型类型』 :

    - 就是 用 『具体的类型』 替换 『类型变量』， ex: 比如其他方法中要 返回Pair<T>类， 或者要用Pair<T>类创建对象

      #+BEGIN_SRC java
      public void Pair<String> minmax(String[] a) { ... }	// 方法中用String 替换了 类型变量
	 
      Pair<Integer> a = new Pair<Integer>();			// 创建对象使用 实例化泛型类型
      #+END_SRC

    - 实例: PairTest1.java
      
      #+BEGIN_SRC java
      public class PairTest1 {

          public static void main(String[] args) {
              String[] words = {"Micheal", "Tommy", "Roy", "Adrien"};

	      Pair<String> mm = ArrayAlg.minmax(words);

	      System.out.println("The Max one is : " + mm.getSecond());
	      System.out.println("The Min one is : " + mm.getFirst());
	  }
      }

      class ArrayAlg {
	  public static Pair<String> minmax(String[] a) {
              // 检查传入数组是不是 没指向 或者 空数组
              if (a == null || a.length == 0) return null;

              String max = a[0];
              String min = a[0];

              for (int i = 1; i < a.length; i++) {
                  if (max.length() < a[i].length()) max = a[i];
                  if (min.length() > a[i].length()) min = a[i];
              }

              // 这个new很关键！
              return new Pair<>(min, max);
	  }
      }
      #+END_SRC

    - 书上说， 泛型类可以看作普通类的工厂

    - 我觉得， 泛型类可以看作是个既能把控安全性， 也能增加 不同类型参数 的加强类

*** 

** 8.3 泛型方法

*** 泛型方法

    - 带有『参数类型』的 方法 ex:

      #+BEGIN_SRC java
      class ArrayAlg {
          public static <T> T getMiddle(T... a) {
	      return a[a.length / 2];
	  }
      }
      #+END_SRC

    - 声明规则: 在修饰符后用<>括起来
      修饰符 <类型变量> 返回值 方法名(参数列表) { ... }

    - 特点:
      * 这个泛型方法在 『普通类』(非泛型类) 中定义。

    - 泛型方法可以定义在『泛型类』中， 也可以定义在『普通类』中。

    - 调用泛型方法

      * 在方法名前的尖括号中放入『具体的类型』	ex:
	#+BEGIN_SRC java
	String middle = ArrayALg.<String>getMiddle("John", "Q", "Public");
	#+END_SRC

      * 方法调用 可以 『省略』 <String>类型参数， 编译器有足够的信息推断出调用的方法。
        根据(<T> T getMiddle(T... a))的T， 看到"John","Q”...就知道是String[]。 ex:
	#+BEGIN_SRC java
	String middle = ArrayAlg.getMiddle("John", "Q", "Public");
	#+END_SRC
	
*** 调用省略类型参数的方法可能出现的问题

    - 大多数情况OK， 但是编译器也会有机会提示错误。 ex:
      #+BEGIN_SRC java
      double middle = ArrayAlg.getMiddle(3.14, 1729, 0);
      #+END_SRC
      
      * 有两种方法解释这个代码， 而且都合法， 编译器会打包参数， 把3.14打包为Double类的对象， 把1729 0 打包为Integer对象
	然后寻找这两个类的共同超类， (Number接口 Comparable接口), 这两个本身也是 Generic type。

      * 就是本身 getMiddle(T a)，T就只能代表一个类型， 你一下子塞了两个类进来， Double Integer这样就炸了

      * 补救方法: 把所有参数都写成double值 1729 -> 1729.00 , 0 -> 0.0 或者加入(double)强转

*** 

** 8.4 类型变量的限定

*** 类型变量的约束性

    - 你有时候把泛型类、泛型方法里面的类型变量加入某些属性、或者方法、你不知道导入的数据是否有这些功能，
      好像你<T> 了个类型变量， 然后方法里面用 T a = new T(); T.compareTo(b) 你怎么直到导入的类型有没有这个功能?
      ex:

      #+BEGIN_SRC java
      class ArrayAlg {
          public static <T> T min(T[] a) {
	      if ((a == null) || a.length == 0) return null;
	      T smallest = a[0];
	      for (int i = 0; i < a.length; i++) {
	          if (smallest.compareTo(a[i]) > 0) smallest = a[i];
	      }
	      return smallest;
	  }
      }
      #+END_SRC

      - 问题来了， T所属的类一定有compareTo的方法?

    - 解决方法， 将T限制为『实现Comparable接口』(Comparable接口含一个方法compareTo), 对 T 设置 bound(限定) ex:

      #+BEGIN_SRC java
      public static <T extends Comparable> T min(T[] a) { ... }
      #+END_SRC
      
      - 其实编译会产生错误， 但现在只讲概念， 因为Comparable是个接口， 他的方法没被重写

    - 为什么接口用的是extends 而不是 『implements』

      - 因为 T 应该是『绑定类型』的 『subtype』(子类型)， T 和 绑定类型 可以是类 或接口。 选extends更接近子类概念。


*** 类型变量声明 限制在 一个父类(只能有一个父类) 和多个接口的表示方法

    - 父类在前， 接口在后， 分隔用 &， ex:
      #+BEGIN_SRC java
      <T extends Comparable & Serializable>
//    类型变量 extends 父类 & 接口 & 接口 & 接口 &...
      #+END_SRC
    
*** 实例Pair2.java
#+BEGIN_SRC java
import java.time.LocalDate;

public class PairTest2 {

    public static void main(String[] args) {
        LocalDate[] birthdays = {
                LocalDate.of(1906, 12, 9),
                LocalDate.of(1815, 12, 10),
                LocalDate.of(1903, 12, 3),
                LocalDate.of(1910, 6, 22),
        };
        Pair<LocalDate> mm = ArrayAlg.minmax(birthdays);
        System.out.println("min = " + mm.getSecond());
        System.out.println("max = " + mm.getFirst());


    }
}

class ArrayAlg {
    public static <T extends Comparable> Pair<T> minmax(T[] a) {
        if (a == null || a.length == 0) return null;

        T max = a[0];
        T min = a[0];

        for (int i = 1; i < a.length; i++) {
            if (max.compareTo(a[i]) > 0) max = a[i];
            if (min.compareTo(a[i]) < 0) min = a[i];
        }

        return new Pair<>(max, min);
    }

}
#+END_SRC

    - 这里用extends 设置了 类型变量的 限定， 所以确定他可以拿 compareTo 的方法来用，
      如果塞进对象的类没有继承或者实现Comparable， 那就编译前直接报错

*** 

** 8.5 泛型代码和虚拟机

   - JVM没有泛型类型对象， 就有普通类！

*** 8.5.1 类型擦除

**** Raw type(原始类型)

     - 定义一个Generic type, 自动提供一个相应的 raw type(原始类型)。

     - Raw type的名字就是删去类型参数后的泛型类型名。

     - erased(擦除)类型变量， 替换为限定类型(无限定的变量用Object); 什么叫限定 看看上面 extends 限定了没有继承的进不了编译

     - Pair<T> 的 原始类型
       #+BEGIN_SRC java
       public class Pair {
           private Object first;
	   private Object second;

	   public Pair() {
	   }

	   public Pair(Object first, Object second) {
	       this.first = first;
               this.second = second;
	   }

	   public Object getFirst() {
               return first;
	   }
    
	   public void setFirst(Object first) {
               this.first = first;
	   }

	   public Object getSecond() {
               return second;
	   }

	   public void setSecond(Object second) {
               this.second = second;
	   }
       }
       #+END_SRC

     - T 是个无限定变量， 直接被Object替换了

**** 限定的原始类型

     - 那就不是用Object来解决了, 下面是Inverva的泛型类型
       #+BEGIN_SRC java
       public class Inverval<T extends Comparable & Serializable> implements Serializable
       // 这是个泛型类， 他的变量类型限定了要继承或实现Comparable 和 Serializable， 
       // 而这个类， 还 实现 Serializable的功能
       {
           private T lower;
	   private T upper;
	   ...
	   public Interval(T first, T second)
	   {
	       if (first.compareTo(second) <= 0) { lower = first; upper = second; }
	       else { lower = second; upper = first; }
	   }
       }
       #+END_SRC

     - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
     - 下面是inverva的原始类型
       #+BEGIN_SRC java
       public class Inverval implements Serializable
       {
           private Comparable lower;
	   private Comparable upper;
	   ...
	   public Interval(Comparable first, Comparable second)
	   {
	       if (first.compareTo(second) <= 0) { lower = first; upper = second; }
	       else { lower = second; upper = first; }
	   }
       }
       #+END_SRC

     - 在限定里面为什么要按顺序写， 先父类， 在接口， 而且应该把tagging接口(标签接口: 即没有方法的接口)放到最后面， 提高效率

     - 如果编译器在前面的接口找不到属性， 就会向当前的原始类型(ex: Comparable)进行强制转换(Serializable), 所以标签接口放最后

**** 

*** 8.5.2 翻译泛型表达式

    - 上面是泛型类型的源代码转换

**** 编译器如何翻译泛型表达式

    - 那如果是调用的源代码是如何转换? 
      - ex:
	#+BEGIN_SRC java
	Pair<Employee> buddies = ...;
	Employee buddy = buddies.getFirst();	// public T getFirst() { return first; }
	// T -> Employee
	#+END_SRC

    - erased getFirst的返回类型后 将返回Object类型， 编译器会『自动插入』 Employee的强制类型转换。

      - ps: 那不就是以前要自己强制转换， 现在交给编译器去转换吗?

**** 总结: 编译器把这个方法 翻译成 两个虚拟机指令:

     - (1) 对『原始方法』(非泛型方法) Pair.getFirst的调用

     - (2) 将返回的 Object 类型 强制转换为 Employee类型

**** 获取泛型域时也要插入强转
     - 泛型域: 就是泛型类的对象中的数据
     - 假设 private T first; => public T first; 这是个很垃圾的编程风格， 但java可以这样
       #+BEGIN_SRC java
       Employee buddy = buddies.first;
       #+END_SRC
     - 在字节码(class)中也会插入强制性转换
       #+BEGIN_SRC java
       Employee buddy = (Employee)buddies.first;
       #+END_SRC


**** 

*** 8.5.3 翻译泛型方法 (这里很迷， 应该要迟点温习)

    - 擦除类型 也会发生在 泛型方法 中

**** 例子:

     - 泛型方法
       #+BEGIN_SRC java
       public static <T> extends Comparable> T min(T[] a) { ... }
       #+END_SRC

     - 普通方法
       #+BEGIN_SRC java
       public static Comparable min(Comparable[] a) { ... }
       #+END_SRC

     - 分析
       - 看， 声明(我认为的) 肯定没了， 然后编译器看到你实现Comparable接口， 就把你的T换成Comparable

**** 如果是一个类继承了泛型类， 继承的那个类中的方法引用了泛型类的 变量类型， 方法中的变量被擦除怎么办
     - 问题来了
       - 这个例子是 DateInterval 类继承了 Pair， 然后重写了 setSecond方法， 里面使用了super调用 Pair的 setSecond方法

       #+BEGIN_SRC java
       class DateInterval extends Pair<LocalDate>
       {
           public void setSecond(LocalDate second)
	   {
	       if (second.compareTo(getFirst()) >= 0)
	           supper.setSecond(second);
	   }
       }
       #+END_SRC

       - 这里用 Comparable的方法确认 下一个数一定小于 上一个数 才能 用Pair setter那个值
       
       
       - 继承的泛型类的 标签<LocalDate> 会被 擦除， public void setSecond(LocalDate second) 怎么办?

     - 变成普通方法
 	 
       #+BEGIN_SRC java
       class DateInterval extends Pair
       {
           public void setSecond(LocalDate second)
	   {
	       if (second.compareTo(getFirst()) >= 0)
	           supper.setSecond(second);
	   }
       }
       #+END_SRC

       - 这个方法从哪继承了 Pair的setSecond方法?

       - 普通方法中应该是
	 #+BEGIN_SRC java
	 public void setSecond(Object second)
	 #+END_SRC



**** 

*** 8.5.4 调用遗留代码    

    - 设计 Generic时， 主要目标是允许泛型代码 和 遗留代码 互相操作

**** 遗留代码

**** annotation(注解)

**** 

*** 

** 8.6 约束与局限性

*** 8.6.1 不能用基本类型 实例化类型参数

**** 为什么不能用基本类型

     - 因为变量类型<>会擦除， 而基本类型 不属于Object类， 存储不了基本类型值。

**** wrapper type(包装器类型)

     - 使用他的类和方法处理， 比如 Integer Double Character 那八个

     - 真的为了语言规范死磕

**** 

*** 8.6.2 运行时类型查询只适用于原始类型

**** instanceof

     - 这个用来检查 对象 是不是真的 在一个类中， ex: if (dog instanceof Cat) {...}

     - 但是:这编译器用这个只能去查 原始类型， 别想着 泛型类型。 因为编译器只有原始类型， 会一直Error, 除非用强制性转换

     #+BEGIN_SRC java
     if (a instanceof Pair<String>)			// Error
     if (a instanceof Pair<T>)				// Error
     Pair<String> p = (Pair<String>) a;			//Warning, but can check a is a Pair
     #+END_SRC

**** getClass

     - 这个也一样 也总是 返回原始类型， 你可以用来比较 但是不肯能干其他

     #+BEGIN_SRC java
     Pair<String> stringPair = ... ;
     Pair<Employee> employeePair = ... ;
     if (stringPair.getClass() = employeePair.getClass())	// It will true
     #+END_SRC       
     
**** 

*** 8.6.3 不能创建参数化类型的数组

- 不能实例化参数化类型的数组
- 老子终于知道怎么回事了!

