* 第一章

*** 备注

**** 字节码: 

***** 要想实现 一次编写到处运行（WORA），JVM 使用 Java 字节码，它是一种介于 Java（用户语言）和机器语言之间的中间语言。Java 字节码是 Java 代码部署的最小单元。

#+BEGIN_SRC java
/**
Java 字节码 是 JVM 的重要元素。JVM 是一个模拟器，它运行 Java 字节码。

Java 编译器并不像 C/C++ 那样直接将高级语言转换成为机器语言（直接的 CPU 指令）；它将 Java 语言转换成为 JVM 可以理解的 Java 字节码。
因为 Java 字节码没有任何依赖于平台的代码，它可以在任意安装好 JVM （准确的说是 JRE）的硬件上运行，即使当 CPU 或 OS 不同时也是如此（在 Windows PC 上开发和编译出的类文件也可以在 Linux 机器上运行，无须任何改变）。
编译好的文件的大小与源码的大小几乎一样，这让通过网络来传输和运行编译的代码变得简单。
*/
#+END_SRC
- 来源: https://www.cnblogs.com/richaaaard/p/6196351.html 感谢Richaaaard

**** Virtual Machine:
#+BEGIN_SRC java
/**
Java 运行时环境包括 Java API 和 JVM 。JVM 负责通过装载器（Class Loader）读取 Java 应用程序并结合 Java API 一起执行。
虚拟机（VM） 是机器的软件实现（如，计算机），它可以像物理机一样执行程序。Java 设计的初衷是让运行时基于虚拟机与物理机器隔离，即一次编写随处执行（WORA - Write Once Run Anywhere），尽管这个目标几乎已经被人遗忘。因此，JVM 可以在各种硬件上运行，并执行 Java 字节码（Java Bytecode） 无须改变 Java 的执行代码。

JVM 有如下特性：
基于栈的虚拟机（Stack-based virtual machine）： 大多数流行的计算机架构如 Intel x86 架构和 ARM 架构都是基于寄存器运行的。但是，JVM 是基于栈运行的 。
标识符引用（Symbolic reference）： 所有类型（类和接口）除了基本类型（又称原始类型）都是通过标识符引用的，而不是通过显式的基于内存地址的引用。
垃圾收集（Garbage collection）： 一个类实例是由用户代码显式创建的并通过垃圾收集自动销毁。
通过清楚的定义基本数据类型（primitive data type）保证平台的独立： 传统的语言如 C/C++ 在不同平台下的 int 类型的大小是不一样的。JVM 清楚地定义了原始数据类型以维持兼容性和保证跨平台的能力。
网络字节顺序（Network byte order）： Java 类文件使用网络字节顺序。要在 Intel x86 架构采用的 little endian 与 RISC 系列架构采用的 big endian 之间维持平台独立，就必须保证固定的字节序。因此，JVM 使用网络字节序，它是一种网络传输的顺序。网络字节序是 big endian 的。

Sun 公司（Sun Microsystems）开发了 Java 。
不过，任何厂商都可以开发并提供 JVM ，只要遵守 Java 虚拟机官方规范文档即可。
因此，JVM 有很多种类，包括 Oracle 公司的 Hotspot JVM 和 IBM 公司的 JVM 。Google 安卓操作系统使用的 Dalvik VM 也是一种 JVM ，尽管它并不遵守 Java 虚拟机规范。与 Java 虚拟机不同（基于栈的虚拟机），Dalvik VM 采用基于寄存器的架构。
*/
#+END_SRC
- 来源: https://www.cnblogs.com/richaaaard/p/6196351.html 感谢Richaaaard

**** class文件
#+BEGIN_SRC java
/**
class文件径打破了C或者C++等语言所遵循的传统，使用这些传统语言写的程序通常首先被编译，然后被连接成单独的、专门支持特定硬件平台和操作系统的二进制文件。
通常情况下，一个平台上的二进制可执行文件不能在其他平台上工作。而Java class文件是可以运行在任何支持Java虚拟机的硬件平台和操作系统上的二进制文件。

当编译和连接一个C++程序时，所获得的可执行二进制文件只能在指定的硬件平台和操作系统上运行，因为这个二进制文件包含了对目标处理器的机器语言。而Java编译器把Java源文件的指令翻译成字节码，这种字节码就是Java虚拟机的“机器语言”。
与普通程序不同的是，Java程序（class文件）并不是本地的可执行程序。当运行Java程序时，首先运行JVM（Java虚拟机），然后再把Java class加载到JVM里头运行，负责加载Java class的这部分就叫做Class Loader。
*/
#+END_SRC
- 来源: 百度百科

** 1.1 Java程序设计平台

**** 制造公司: Sum(Stanford University Network), 已经被Oracle收购.

**** 第一代发布时间: 1996

**** 编写语言: C++

**** 原名: Oak, 但是已经被注册了. 所以用Java这种咖啡名作为名字.

**** 创始人: James Gosling

** 1.2 Java "白皮书"的关键术语

**** (1) 简单性

***** 剔除了C++很少使用, 难以理解, 易混淆的特性, 保留了C++常用特性. "纯净版"的C++.

***** PS: 实际上也不简单啊

**** (2) 面向对象

***** 面向对象设计是一种"程序设计技术". 把重点放在 数据(即对象) 和 对象的接口上. 与C++不同在于 C++用 多重继承 . Java用 接口.

**** (3) 分布式

***** Java应用程序能通过URL打开和访问网络上的对象.

**** (4) 健壮性

***** Java编译器能检查出很多问题.

**** (5) 安全性

***** 沙盒, JVM

**** (6) 体系结构中立

***** JVM. 与计算机体系结构五官,只编译出JVM统一的代码.

***** 即时编译: 虚拟机有一个选项可以将执行最频繁的字节码序列翻译成机器码. 虽然不能跟C/C++速度比. 但这个功能弥补一定差距.

**** (7) 可移植性

***** C/C++ 不同平台上的编译器的数据类型的位数可能不一样. Java固定的. 不用太多考虑操心底层操作系统

**** (8) 解释型

***** Java解释器 可以在任何移植了解释器的机器上执行Java字节码. 

**** (9) 高性能

***** 字节码可以动态翻译成对应运行这个应用的特定CPU的机器码.

**** (10) 多线程

***** Java是第一个支持 "并发" 程序设计的主流语言.

**** (11) 动态性

***** 库可以自由地添加新方法和实例变量(No static) , 而对客户端没有任何影响. ex: 从Internet下载代码, 在浏览器运行.

**** 

** 1.3 Java applet 与 Internet

*** applet

**** 在Internet下载Java字节码, 并在自己的机器上的网页中运行的Java程序称为 "applet".

**** 要使用applet必须启用java的web浏览器执行字节码. 虚拟机嘛, 很安全.

**** PS: 现在大家都用Flash了

**** 

** 1.4 Java 发展简史

**** 自己看书 P.7

**** 

** 1.5 关于Java的常见误解

**** 自己看书 P.9 我没有任何误解 , 苦笑
